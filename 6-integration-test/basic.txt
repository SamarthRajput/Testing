We run npx primsa init to initialise a schema.prisma file and in schema.prisma file we describe what all tables would look like 
We are creating an application where people can come and sends a /sum request or /multiple request, so we want to store all of these in the database

An enum lets you create variants, if you want to inforce, ki there are only 2 things allowed here either Add or Multiply then you add an enum compared to a string 
There is a difference between migration and generation 
Migration means you are actually migrating your database, you are telling your database create these tables 
npx prisma generate just generates the prisma client locally, it generates a library that we can use in our index.ts 

We havent added app.listen(3000) at the end of index.ts bcz whenever the tests starts, I want the tests to use the app variable 
at the very top of the tests we were importing app from "../index", we need this app variable to be finally in my tests whenever our tests import the app variable we dont want our http server to start the test will start it themselves
and hence we make sure index.ts is not listening on a port, we create a separate file usually called bin.ts (bin stands for binary)

In this command 
docker run -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword  -d postgres
the password is mysecretpassword
the default username is postgres
the default database is postgres 

First replace the database url with the current database url 
our current database url looks like "postgresql://postgres:mysecretpassword@localhost:5432/postgres"

Now run the command 
npx prisma migrate dev --name init
this command will 1. creates a folder for you, it wrote some sql for us, it actually sends the create table query to the database, so that my database has migrated 
now my database has a Request table 

We should use docker compose up instead of the script, docker compose lets you compose multiple containers 
docker compose just lets you describe your container in a single file, so if you ever want to start all of these services we described in docker-compose.yml file
we have to just run the command docker-compose up 

As we are writing the tests we have to reset our database, delete everything inside 
Create a folder scripts inside which create a file run-integration.sh file 
its a shell script, its not a typescript file 
we will be running the shell script file by running the command 
chmod +x ./scripts/*        this means makes all the files executable
and then run  ./scripts/run-integration.sh

beforeEach() -> it means before each tests runs run the following function or code, if you want something to run before every test 
The better thing to do is use beforeAll() function
beforeAll() -> it means before all of these tests run just run the function once, before all these tests run just once run this code base inside the beforeAll function 
If you want to clean something before tests, if you want to clean a mock, 
if you want to clean something else between 2 tests we use the beforeEach statement/function 
if you want something to run before all the tests we use beforeAll
