jest and vitest are the frameworks we are using, there are many frameworks in javascript that lets you do testing 
jest, mocha and vitest are the framework that are used for testing 
How can you after you written tests, add a Ci/CD pipeline, so if developers come and make a wrong change, how can you catch them right at the pull request
how can you make a workflow pull request fail, if the tests fails 
You wrote a file, inside the file you wrote a bunch of test cases, the test cases doesn't ofcourse check everything, you cannot write infinite test cases and cover every edge case
but you try to cover the most common edge cases these are what are called automated testing

You can create a sister file called index.test.js, in which we will import the function and we also need to make sure the function is exporting
this is an ugly way to write tests 
Hence having tests are super useful, if you have bunch of developers, if we have good tests, those tests should automatically fail if there was a bug in the code 
that's why we need test, thats why we write tests 

After you write your application logic, application logic means the real logic that runs in production that is running on an EC2 machine 
testing logic is the logic that you run from time to time to make sure tests are running, but you dont run them on EC2 machine

Jest is a delightful javascript testing framework with a focus on simplicity
To install jest in a ts project we have to run the command npm install --save-dev ts-jest @jest/globals
the --save-dev flag is used to save the jest dependencies, in the devDependencies not in the dependencies in package.json
the difference is anything that doesn't run on your EC2 machine, that you only need during development is we should put in the devDependencies 

To initialise the jest file, we have to run the command -> npx ts-jest config:init
now changing our package.json scripts
scripts: {
    "test": "jest"
}
now we can run npm run test to run all our test cases 
create a tests folder in src and there create a file index.test.ts, jest by default will go through your complete src folder and look for all files that end with .test.ts
and try for look for tests there, so it doesnt matter where you store it as long as the file ends with .test.ts or .spec.ts jest will understand, ki this the file for me, i need to run all the tests that exists inside this file 

the supertest library is written for you to test http servers, is the ideal way to test an express server 
to install supertest library run the command  npm i supertest @types/supertest
now initialize jest.config.ts
we create a bin.ts file in src folder where we import our app and write app.listen(3000)
which means that index.ts is what tests will use, index.test.ts will never import bin.ts, but the bin.ts is what you run finally 

We have a complete coverage of the specific endpoint, coverage means when my testcases run there are cases that check all the paths of code
You dont only check for success cases, you also check for unsuccessful cases and should add tests for them also 
.set({}) is what we use in tests to set the headers    


We usually avoid writing database calls when we are writing unit tests 
3 types of testing that we can do 
1. Unit testing: Which as the name suggests, we test a small unit of your code, you dont start/connect to databases 
    We might have multiple external services a database like postgres be it kafka or be it redis, whenever you are testing the code you will mock out all of these external dependencies somehow and only test the logic of your code
    we dont need to start a database, we dont need to migrate a database
    evenually when we deploy our application, we will migrate our database
    we can simply do npx prisma generate to generate the prisma clients 
2. Integration testing: where we do connect to databases 
3. end to end testing: when we actually start a browser while testing 

We can do mocking the database calls, using jest but vitest make it slightly easier 
vitest is also a testing framework, it is highly backward compatible with jest  

A database is an external service 
We dont have to hit the actual database, our tests will mock out the database calls
We dont have to migrate the database but we have to generate the clients using npx prisma generate command 

The problem with mocking is as our project become bigger and bigger you have to add other things 
vitest lets you do deep mocking 
Another way to mock variables is to let vitest figure out the types and mock out all the attributes of the object being mocked 
We could just tell vitest ki please mock the whole thing, so we dont have to define the object vi.mock() ourselves
We have to download other dependency npm i -D vitest-mock-extended
it lets you mock recursively all the functions they have 
A common practice that you create a __mocks__ folder right next to the file which we want to mock out in the same directory  

The good thing about unit testing is you dont actually need a database 
wouldn't it be nice please mock out the whole thing deeply, figure out all keys exists on the prismaClient and mock out everything 
if someone calls prismaClient.request.create or prismaClient.request.update it should be mocked out, it is known as deep mocking 
the word deep comes from deep copying (deep and shallow copy ) 


we can use a mockReturnValue that returns a mocked value 
What if we start to store wrong things in the database, we were never testing the inputs to the mock
You should test the inputs and whether or not you were sending the right inputs to a specific functions 

we will spy on the function call, spying means even though this is the mocked function, we want to spy on it 
we want to see was this function called, what inputs was this called with that is what spying on a function means 
